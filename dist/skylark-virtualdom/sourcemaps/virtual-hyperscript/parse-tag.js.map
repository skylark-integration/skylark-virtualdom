{"version":3,"sources":["virtual-hyperscript/parse-tag.js"],"names":["define","exports","module","split","s","arg","classIdSplit","notClassId","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","tag","props","classes","part","type","i","noId","hasOwnProperty","tagParts","tagName","test","length","charAt","push","substring","id","className","join","namespace","toUpperCase"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aACA,IAAIC,KACAC,GAAWD,YACXE,EAAQ,SAAUC,EAAGC,GACrB,OAAOD,EAAED,MAAME,IAEfC,EAAe,uCACfC,EAAa,QA0CjB,SAASC,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OA5CAP,EAAOD,QACP,SAAkBa,EAAKC,GACnB,IAAKD,EACD,MAAO,MAEX,IAMIE,EAASC,EAAMC,EAAMC,EANrBC,GAAQL,EAAMM,eAAe,MAC7BC,EAAWnB,EAAMW,EAAKR,GACtBiB,EAAU,KACVhB,EAAWiB,KAAKF,EAAS,MACzBC,EAAU,OAGd,IAAKJ,EAAI,EAAGA,EAAIG,EAASG,OAAQN,KAC7BF,EAAOK,EAASH,MAIhBD,EAAOD,EAAKS,OAAO,GACdH,EAEe,MAATL,GACPF,EAAUA,OACFW,KAAKV,EAAKW,UAAU,EAAGX,EAAKQ,SACpB,MAATP,GAAgBE,IACvBL,EAAMc,GAAKZ,EAAKW,UAAU,EAAGX,EAAKQ,SALlCF,EAAUN,GAQdD,IACID,EAAMe,WACNd,EAAQW,KAAKZ,EAAMe,WAEvBf,EAAMe,UAAYd,EAAQe,KAAK,MAEnC,OAAOhB,EAAMiB,UAAYT,EAAUA,EAAQU,eAW3CzB,EAAkBN,EAAOD,SAClBC,EAAOD,QACTO,EAAkBP,GAChBA,OADN","file":"../../virtual-hyperscript/parse-tag.js","sourcesContent":["define([], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var split = function (s, arg) {\n        return s.split(arg);\n    };\n    var classIdSplit = /([\\.#]?[a-zA-Z0-9\\u007F-\\uFFFF_:-]+)/;\n    var notClassId = /^\\.|#/;\n    module.exports = parseTag;\n    function parseTag(tag, props) {\n        if (!tag) {\n            return 'DIV';\n        }\n        var noId = !props.hasOwnProperty('id');\n        var tagParts = split(tag, classIdSplit);\n        var tagName = null;\n        if (notClassId.test(tagParts[1])) {\n            tagName = 'DIV';\n        }\n        var classes, part, type, i;\n        for (i = 0; i < tagParts.length; i++) {\n            part = tagParts[i];\n            if (!part) {\n                continue;\n            }\n            type = part.charAt(0);\n            if (!tagName) {\n                tagName = part;\n            } else if (type === '.') {\n                classes = classes || [];\n                classes.push(part.substring(1, part.length));\n            } else if (type === '#' && noId) {\n                props.id = part.substring(1, part.length);\n            }\n        }\n        if (classes) {\n            if (props.className) {\n                classes.push(props.className);\n            }\n            props.className = classes.join(' ');\n        }\n        return props.namespace ? tagName : tagName.toUpperCase();\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}