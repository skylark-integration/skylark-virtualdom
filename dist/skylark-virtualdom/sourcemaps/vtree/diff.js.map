{"version":3,"sources":["vtree/diff.js"],"names":["define","__module__0","__module__1","__module__2","__module__3","__module__4","__module__5","__module__6","__module__7","exports","module","isArray","VPatch","isVNode","isVText","isWidget","isThunk","handleThunk","diffProps","diff","a","b","patch","walk","index","apply","applyClear","thunks","clearState","appendPatch","REMOVE","tagName","namespace","key","propsPatch","properties","PROPS","aChildren","children","orderedSet","bChildren","bChildIndex","keyIndex","bKeys","keys","bFree","free","length","moves","aChildIndex","aKeys","newChildren","freeIndex","freeCount","deletedItems","i","itemIndex","aItem","hasOwnProperty","push","lastFreeIndex","j","newItem","simulateItem","simulate","slice","simulateIndex","removes","inserts","k","wantedItem","remove","to","reorder","aLen","bLen","len","leftNode","rightNode","INSERT","count","ORDER","diffChildren","VNODE","text","VTEXT","WIDGET","vNode","unhook","hooks","obj","result","undefined","undefinedKeys","descendantHooks","hasThunks","child","destroyWidgets","destroy","hasWidgets","nodes","thunkPatch","hasPatches","THUNK","arr","splice","from","__isValidToReturn","Array","attr","__isEmptyObject"],"mappings":"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","file":"../../vtree/diff.js","sourcesContent":["define([\n    'skylark-langx/arrays',\n    '../vnode/vpatch',\n    '../vnode/is-vnode',\n    '../vnode/is-vtext',\n    '../vnode/is-widget',\n    '../vnode/is-thunk',\n    '../vnode/handle-thunk',\n    './diff-props'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4, __module__5, __module__6, __module__7) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var isArray = __module__0.isArray;\n    var VPatch = __module__1;\n    var isVNode = __module__2;\n    var isVText = __module__3;\n    var isWidget = __module__4;\n    var isThunk = __module__5;\n    var handleThunk = __module__6;\n    var diffProps = __module__7;\n    module.exports = diff;\n    function diff(a, b) {\n        var patch = { a: a };\n        walk(a, b, patch, 0);\n        return patch;\n    }\n    function walk(a, b, patch, index) {\n        if (a === b) {\n            return;\n        }\n        var apply = patch[index];\n        var applyClear = false;\n        if (isThunk(a) || isThunk(b)) {\n            thunks(a, b, patch, index);\n        } else if (b == null) {\n            if (!isWidget(a)) {\n                clearState(a, patch, index);\n                apply = patch[index];\n            }\n            apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b));\n        } else if (isVNode(b)) {\n            if (isVNode(a)) {\n                if (a.tagName === b.tagName && a.namespace === b.namespace && a.key === b.key) {\n                    var propsPatch = diffProps(a.properties, b.properties);\n                    if (propsPatch) {\n                        apply = appendPatch(apply, new VPatch(VPatch.PROPS, a, propsPatch));\n                    }\n                    apply = diffChildren(a, b, patch, apply, index);\n                } else {\n                    apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));\n                    applyClear = true;\n                }\n            } else {\n                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));\n                applyClear = true;\n            }\n        } else if (isVText(b)) {\n            if (!isVText(a)) {\n                apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));\n                applyClear = true;\n            } else if (a.text !== b.text) {\n                apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));\n            }\n        } else if (isWidget(b)) {\n            if (!isWidget(a)) {\n                applyClear = true;\n            }\n            apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b));\n        }\n        if (apply) {\n            patch[index] = apply;\n        }\n        if (applyClear) {\n            clearState(a, patch, index);\n        }\n    }\n    function diffChildren(a, b, patch, apply, index) {\n        var aChildren = a.children;\n        var orderedSet = reorder(aChildren, b.children);\n        var bChildren = orderedSet.children;\n        var aLen = aChildren.length;\n        var bLen = bChildren.length;\n        var len = aLen > bLen ? aLen : bLen;\n        for (var i = 0; i < len; i++) {\n            var leftNode = aChildren[i];\n            var rightNode = bChildren[i];\n            index += 1;\n            if (!leftNode) {\n                if (rightNode) {\n                    apply = appendPatch(apply, new VPatch(VPatch.INSERT, null, rightNode));\n                }\n            } else {\n                walk(leftNode, rightNode, patch, index);\n            }\n            if (isVNode(leftNode) && leftNode.count) {\n                index += leftNode.count;\n            }\n        }\n        if (orderedSet.moves) {\n            apply = appendPatch(apply, new VPatch(VPatch.ORDER, a, orderedSet.moves));\n        }\n        return apply;\n    }\n    function clearState(vNode, patch, index) {\n        unhook(vNode, patch, index);\n        destroyWidgets(vNode, patch, index);\n    }\n    function destroyWidgets(vNode, patch, index) {\n        if (isWidget(vNode)) {\n            if (typeof vNode.destroy === 'function') {\n                patch[index] = appendPatch(patch[index], new VPatch(VPatch.REMOVE, vNode, null));\n            }\n        } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {\n            var children = vNode.children;\n            var len = children.length;\n            for (var i = 0; i < len; i++) {\n                var child = children[i];\n                index += 1;\n                destroyWidgets(child, patch, index);\n                if (isVNode(child) && child.count) {\n                    index += child.count;\n                }\n            }\n        } else if (isThunk(vNode)) {\n            thunks(vNode, null, patch, index);\n        }\n    }\n    function thunks(a, b, patch, index) {\n        var nodes = handleThunk(a, b);\n        var thunkPatch = diff(nodes.a, nodes.b);\n        if (hasPatches(thunkPatch)) {\n            patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch);\n        }\n    }\n    function hasPatches(patch) {\n        for (var index in patch) {\n            if (index !== 'a') {\n                return true;\n            }\n        }\n        return false;\n    }\n    function unhook(vNode, patch, index) {\n        if (isVNode(vNode)) {\n            if (vNode.hooks) {\n                patch[index] = appendPatch(patch[index], new VPatch(VPatch.PROPS, vNode, undefinedKeys(vNode.hooks)));\n            }\n            if (vNode.descendantHooks || vNode.hasThunks) {\n                var children = vNode.children;\n                var len = children.length;\n                for (var i = 0; i < len; i++) {\n                    var child = children[i];\n                    index += 1;\n                    unhook(child, patch, index);\n                    if (isVNode(child) && child.count) {\n                        index += child.count;\n                    }\n                }\n            }\n        } else if (isThunk(vNode)) {\n            thunks(vNode, null, patch, index);\n        }\n    }\n    function undefinedKeys(obj) {\n        var result = {};\n        for (var key in obj) {\n            result[key] = undefined;\n        }\n        return result;\n    }\n    function reorder(aChildren, bChildren) {\n        var bChildIndex = keyIndex(bChildren);\n        var bKeys = bChildIndex.keys;\n        var bFree = bChildIndex.free;\n        if (bFree.length === bChildren.length) {\n            return {\n                children: bChildren,\n                moves: null\n            };\n        }\n        var aChildIndex = keyIndex(aChildren);\n        var aKeys = aChildIndex.keys;\n        var aFree = aChildIndex.free;\n        if (aFree.length === aChildren.length) {\n            return {\n                children: bChildren,\n                moves: null\n            };\n        }\n        var newChildren = [];\n        var freeIndex = 0;\n        var freeCount = bFree.length;\n        var deletedItems = 0;\n        for (var i = 0; i < aChildren.length; i++) {\n            var aItem = aChildren[i];\n            var itemIndex;\n            if (aItem.key) {\n                if (bKeys.hasOwnProperty(aItem.key)) {\n                    itemIndex = bKeys[aItem.key];\n                    newChildren.push(bChildren[itemIndex]);\n                } else {\n                    itemIndex = i - deletedItems++;\n                    newChildren.push(null);\n                }\n            } else {\n                if (freeIndex < freeCount) {\n                    itemIndex = bFree[freeIndex++];\n                    newChildren.push(bChildren[itemIndex]);\n                } else {\n                    itemIndex = i - deletedItems++;\n                    newChildren.push(null);\n                }\n            }\n        }\n        var lastFreeIndex = freeIndex >= bFree.length ? bChildren.length : bFree[freeIndex];\n        for (var j = 0; j < bChildren.length; j++) {\n            var newItem = bChildren[j];\n            if (newItem.key) {\n                if (!aKeys.hasOwnProperty(newItem.key)) {\n                    newChildren.push(newItem);\n                }\n            } else if (j >= lastFreeIndex) {\n                newChildren.push(newItem);\n            }\n        }\n        var simulate = newChildren.slice();\n        var simulateIndex = 0;\n        var removes = [];\n        var inserts = [];\n        var simulateItem;\n        for (var k = 0; k < bChildren.length;) {\n            var wantedItem = bChildren[k];\n            simulateItem = simulate[simulateIndex];\n            while (simulateItem === null && simulate.length) {\n                removes.push(remove(simulate, simulateIndex, null));\n                simulateItem = simulate[simulateIndex];\n            }\n            if (!simulateItem || simulateItem.key !== wantedItem.key) {\n                if (wantedItem.key) {\n                    if (simulateItem && simulateItem.key) {\n                        if (bKeys[simulateItem.key] !== k + 1) {\n                            removes.push(remove(simulate, simulateIndex, simulateItem.key));\n                            simulateItem = simulate[simulateIndex];\n                            if (!simulateItem || simulateItem.key !== wantedItem.key) {\n                                inserts.push({\n                                    key: wantedItem.key,\n                                    to: k\n                                });\n                            } else {\n                                simulateIndex++;\n                            }\n                        } else {\n                            inserts.push({\n                                key: wantedItem.key,\n                                to: k\n                            });\n                        }\n                    } else {\n                        inserts.push({\n                            key: wantedItem.key,\n                            to: k\n                        });\n                    }\n                    k++;\n                } else if (simulateItem && simulateItem.key) {\n                    removes.push(remove(simulate, simulateIndex, simulateItem.key));\n                }\n            } else {\n                simulateIndex++;\n                k++;\n            }\n        }\n        while (simulateIndex < simulate.length) {\n            simulateItem = simulate[simulateIndex];\n            removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key));\n        }\n        if (removes.length === deletedItems && !inserts.length) {\n            return {\n                children: newChildren,\n                moves: null\n            };\n        }\n        return {\n            children: newChildren,\n            moves: {\n                removes: removes,\n                inserts: inserts\n            }\n        };\n    }\n    function remove(arr, index, key) {\n        arr.splice(index, 1);\n        return {\n            from: index,\n            key: key\n        };\n    }\n    function keyIndex(children) {\n        var keys = {};\n        var free = [];\n        var length = children.length;\n        for (var i = 0; i < length; i++) {\n            var child = children[i];\n            if (child.key) {\n                keys[child.key] = i;\n            } else {\n                free.push(i);\n            }\n        }\n        return {\n            keys: keys,\n            free: free\n        };\n    }\n    function appendPatch(apply, patch) {\n        if (apply) {\n            if (isArray(apply)) {\n                apply.push(patch);\n            } else {\n                apply = [\n                    apply,\n                    patch\n                ];\n            }\n            return apply;\n        } else {\n            return patch;\n        }\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}