{"version":3,"sources":["skylark-virtualdom.js"],"names":[],"mappingsfile":"../skylark-virtualdom.js","sourcesContent":["define('skylark-virtualdom/vnode/version',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    module.exports = '2';\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/vpatch',['./version'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var version = __module__0;\n    VirtualPatch.NONE = 0;\n    VirtualPatch.VTEXT = 1;\n    VirtualPatch.VNODE = 2;\n    VirtualPatch.WIDGET = 3;\n    VirtualPatch.PROPS = 4;\n    VirtualPatch.ORDER = 5;\n    VirtualPatch.INSERT = 6;\n    VirtualPatch.REMOVE = 7;\n    VirtualPatch.THUNK = 8;\n    module.exports = VirtualPatch;\n    function VirtualPatch(type, vNode, patch) {\n        this.type = Number(type);\n        this.vNode = vNode;\n        this.patch = patch;\n    }\n    VirtualPatch.prototype.version = version;\n    VirtualPatch.prototype.type = 'VirtualPatch';\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/is-vnode',['./version'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var version = __module__0;\n    module.exports = isVirtualNode;\n    function isVirtualNode(x) {\n        return x && x.type === 'VirtualNode' && x.version === version;\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/is-vtext',['./version'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var version = __module__0;\n    module.exports = isVirtualText;\n    function isVirtualText(x) {\n        return x && x.type === 'VirtualText' && x.version === version;\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/is-widget',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    module.exports = isWidget;\n    function isWidget(w) {\n        return w && w.type === 'Widget';\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/is-thunk',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    module.exports = isThunk;\n    function isThunk(t) {\n        return t && t.type === 'Thunk';\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/handle-thunk',[\n    './is-vnode',\n    './is-vtext',\n    './is-widget',\n    './is-thunk'\n], function (__module__0, __module__1, __module__2, __module__3) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var isVNode = __module__0;\n    var isVText = __module__1;\n    var isWidget = __module__2;\n    var isThunk = __module__3;\n    module.exports = handleThunk;\n    function handleThunk(a, b) {\n        var renderedA = a;\n        var renderedB = b;\n        if (isThunk(b)) {\n            renderedB = renderThunk(b, a);\n        }\n        if (isThunk(a)) {\n            renderedA = renderThunk(a, null);\n        }\n        return {\n            a: renderedA,\n            b: renderedB\n        };\n    }\n    function renderThunk(thunk, previous) {\n        var renderedThunk = thunk.vnode;\n        if (!renderedThunk) {\n            renderedThunk = thunk.vnode = thunk.render(previous);\n        }\n        if (!(isVNode(renderedThunk) || isVText(renderedThunk) || isWidget(renderedThunk))) {\n            throw new Error('thunk did not return a valid node');\n        }\n        return renderedThunk;\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/is-vhook',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    module.exports = isHook;\n    function isHook(hook) {\n        return hook && (typeof hook.hook === 'function' && !hook.hasOwnProperty('hook') || typeof hook.unhook === 'function' && !hook.hasOwnProperty('unhook'));\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vtree/diff-props',[\n    'skylark-langx/types',\n    '../vnode/is-vhook'\n], function (__module__0, __module__1) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var isObject = __module__0.isObject;\n    var isHook = __module__1;\n    module.exports = diffProps;\n    function diffProps(a, b) {\n        var diff;\n        for (var aKey in a) {\n            if (!(aKey in b)) {\n                diff = diff || {};\n                diff[aKey] = undefined;\n            }\n            var aValue = a[aKey];\n            var bValue = b[aKey];\n            if (aValue === bValue) {\n                continue;\n            } else if (isObject(aValue) && isObject(bValue)) {\n                if (getPrototype(bValue) !== getPrototype(aValue)) {\n                    diff = diff || {};\n                    diff[aKey] = bValue;\n                } else if (isHook(bValue)) {\n                    diff = diff || {};\n                    diff[aKey] = bValue;\n                } else {\n                    var objectDiff = diffProps(aValue, bValue);\n                    if (objectDiff) {\n                        diff = diff || {};\n                        diff[aKey] = objectDiff;\n                    }\n                }\n            } else {\n                diff = diff || {};\n                diff[aKey] = bValue;\n            }\n        }\n        for (var bKey in b) {\n            if (!(bKey in a)) {\n                diff = diff || {};\n                diff[bKey] = b[bKey];\n            }\n        }\n        return diff;\n    }\n    function getPrototype(value) {\n        if (Object.getPrototypeOf) {\n            return Object.getPrototypeOf(value);\n        } else if (value.__proto__) {\n            return value.__proto__;\n        } else if (value.constructor) {\n            return value.constructor.prototype;\n        }\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vtree/diff',[\n    'skylark-langx/arrays',\n    '../vnode/vpatch',\n    '../vnode/is-vnode',\n    '../vnode/is-vtext',\n    '../vnode/is-widget',\n    '../vnode/is-thunk',\n    '../vnode/handle-thunk',\n    './diff-props'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4, __module__5, __module__6, __module__7) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var isArray = __module__0.isArray;\n    var VPatch = __module__1;\n    var isVNode = __module__2;\n    var isVText = __module__3;\n    var isWidget = __module__4;\n    var isThunk = __module__5;\n    var handleThunk = __module__6;\n    var diffProps = __module__7;\n    module.exports = diff;\n    function diff(a, b) {\n        var patch = { a: a };\n        walk(a, b, patch, 0);\n        return patch;\n    }\n    function walk(a, b, patch, index) {\n        if (a === b) {\n            return;\n        }\n        var apply = patch[index];\n        var applyClear = false;\n        if (isThunk(a) || isThunk(b)) {\n            thunks(a, b, patch, index);\n        } else if (b == null) {\n            if (!isWidget(a)) {\n                clearState(a, patch, index);\n                apply = patch[index];\n            }\n            apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b));\n        } else if (isVNode(b)) {\n            if (isVNode(a)) {\n                if (a.tagName === b.tagName && a.namespace === b.namespace && a.key === b.key) {\n                    var propsPatch = diffProps(a.properties, b.properties);\n                    if (propsPatch) {\n                        apply = appendPatch(apply, new VPatch(VPatch.PROPS, a, propsPatch));\n                    }\n                    apply = diffChildren(a, b, patch, apply, index);\n                } else {\n                    apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));\n                    applyClear = true;\n                }\n            } else {\n                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));\n                applyClear = true;\n            }\n        } else if (isVText(b)) {\n            if (!isVText(a)) {\n                apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));\n                applyClear = true;\n            } else if (a.text !== b.text) {\n                apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));\n            }\n        } else if (isWidget(b)) {\n            if (!isWidget(a)) {\n                applyClear = true;\n            }\n            apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b));\n        }\n        if (apply) {\n            patch[index] = apply;\n        }\n        if (applyClear) {\n            clearState(a, patch, index);\n        }\n    }\n    function diffChildren(a, b, patch, apply, index) {\n        var aChildren = a.children;\n        var orderedSet = reorder(aChildren, b.children);\n        var bChildren = orderedSet.children;\n        var aLen = aChildren.length;\n        var bLen = bChildren.length;\n        var len = aLen > bLen ? aLen : bLen;\n        for (var i = 0; i < len; i++) {\n            var leftNode = aChildren[i];\n            var rightNode = bChildren[i];\n            index += 1;\n            if (!leftNode) {\n                if (rightNode) {\n                    apply = appendPatch(apply, new VPatch(VPatch.INSERT, null, rightNode));\n                }\n            } else {\n                walk(leftNode, rightNode, patch, index);\n            }\n            if (isVNode(leftNode) && leftNode.count) {\n                index += leftNode.count;\n            }\n        }\n        if (orderedSet.moves) {\n            apply = appendPatch(apply, new VPatch(VPatch.ORDER, a, orderedSet.moves));\n        }\n        return apply;\n    }\n    function clearState(vNode, patch, index) {\n        unhook(vNode, patch, index);\n        destroyWidgets(vNode, patch, index);\n    }\n    function destroyWidgets(vNode, patch, index) {\n        if (isWidget(vNode)) {\n            if (typeof vNode.destroy === 'function') {\n                patch[index] = appendPatch(patch[index], new VPatch(VPatch.REMOVE, vNode, null));\n            }\n        } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {\n            var children = vNode.children;\n            var len = children.length;\n            for (var i = 0; i < len; i++) {\n                var child = children[i];\n                index += 1;\n                destroyWidgets(child, patch, index);\n                if (isVNode(child) && child.count) {\n                    index += child.count;\n                }\n            }\n        } else if (isThunk(vNode)) {\n            thunks(vNode, null, patch, index);\n        }\n    }\n    function thunks(a, b, patch, index) {\n        var nodes = handleThunk(a, b);\n        var thunkPatch = diff(nodes.a, nodes.b);\n        if (hasPatches(thunkPatch)) {\n            patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch);\n        }\n    }\n    function hasPatches(patch) {\n        for (var index in patch) {\n            if (index !== 'a') {\n                return true;\n            }\n        }\n        return false;\n    }\n    function unhook(vNode, patch, index) {\n        if (isVNode(vNode)) {\n            if (vNode.hooks) {\n                patch[index] = appendPatch(patch[index], new VPatch(VPatch.PROPS, vNode, undefinedKeys(vNode.hooks)));\n            }\n            if (vNode.descendantHooks || vNode.hasThunks) {\n                var children = vNode.children;\n                var len = children.length;\n                for (var i = 0; i < len; i++) {\n                    var child = children[i];\n                    index += 1;\n                    unhook(child, patch, index);\n                    if (isVNode(child) && child.count) {\n                        index += child.count;\n                    }\n                }\n            }\n        } else if (isThunk(vNode)) {\n            thunks(vNode, null, patch, index);\n        }\n    }\n    function undefinedKeys(obj) {\n        var result = {};\n        for (var key in obj) {\n            result[key] = undefined;\n        }\n        return result;\n    }\n    function reorder(aChildren, bChildren) {\n        var bChildIndex = keyIndex(bChildren);\n        var bKeys = bChildIndex.keys;\n        var bFree = bChildIndex.free;\n        if (bFree.length === bChildren.length) {\n            return {\n                children: bChildren,\n                moves: null\n            };\n        }\n        var aChildIndex = keyIndex(aChildren);\n        var aKeys = aChildIndex.keys;\n        var aFree = aChildIndex.free;\n        if (aFree.length === aChildren.length) {\n            return {\n                children: bChildren,\n                moves: null\n            };\n        }\n        var newChildren = [];\n        var freeIndex = 0;\n        var freeCount = bFree.length;\n        var deletedItems = 0;\n        for (var i = 0; i < aChildren.length; i++) {\n            var aItem = aChildren[i];\n            var itemIndex;\n            if (aItem.key) {\n                if (bKeys.hasOwnProperty(aItem.key)) {\n                    itemIndex = bKeys[aItem.key];\n                    newChildren.push(bChildren[itemIndex]);\n                } else {\n                    itemIndex = i - deletedItems++;\n                    newChildren.push(null);\n                }\n            } else {\n                if (freeIndex < freeCount) {\n                    itemIndex = bFree[freeIndex++];\n                    newChildren.push(bChildren[itemIndex]);\n                } else {\n                    itemIndex = i - deletedItems++;\n                    newChildren.push(null);\n                }\n            }\n        }\n        var lastFreeIndex = freeIndex >= bFree.length ? bChildren.length : bFree[freeIndex];\n        for (var j = 0; j < bChildren.length; j++) {\n            var newItem = bChildren[j];\n            if (newItem.key) {\n                if (!aKeys.hasOwnProperty(newItem.key)) {\n                    newChildren.push(newItem);\n                }\n            } else if (j >= lastFreeIndex) {\n                newChildren.push(newItem);\n            }\n        }\n        var simulate = newChildren.slice();\n        var simulateIndex = 0;\n        var removes = [];\n        var inserts = [];\n        var simulateItem;\n        for (var k = 0; k < bChildren.length;) {\n            var wantedItem = bChildren[k];\n            simulateItem = simulate[simulateIndex];\n            while (simulateItem === null && simulate.length) {\n                removes.push(remove(simulate, simulateIndex, null));\n                simulateItem = simulate[simulateIndex];\n            }\n            if (!simulateItem || simulateItem.key !== wantedItem.key) {\n                if (wantedItem.key) {\n                    if (simulateItem && simulateItem.key) {\n                        if (bKeys[simulateItem.key] !== k + 1) {\n                            removes.push(remove(simulate, simulateIndex, simulateItem.key));\n                            simulateItem = simulate[simulateIndex];\n                            if (!simulateItem || simulateItem.key !== wantedItem.key) {\n                                inserts.push({\n                                    key: wantedItem.key,\n                                    to: k\n                                });\n                            } else {\n                                simulateIndex++;\n                            }\n                        } else {\n                            inserts.push({\n                                key: wantedItem.key,\n                                to: k\n                            });\n                        }\n                    } else {\n                        inserts.push({\n                            key: wantedItem.key,\n                            to: k\n                        });\n                    }\n                    k++;\n                } else if (simulateItem && simulateItem.key) {\n                    removes.push(remove(simulate, simulateIndex, simulateItem.key));\n                }\n            } else {\n                simulateIndex++;\n                k++;\n            }\n        }\n        while (simulateIndex < simulate.length) {\n            simulateItem = simulate[simulateIndex];\n            removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key));\n        }\n        if (removes.length === deletedItems && !inserts.length) {\n            return {\n                children: newChildren,\n                moves: null\n            };\n        }\n        return {\n            children: newChildren,\n            moves: {\n                removes: removes,\n                inserts: inserts\n            }\n        };\n    }\n    function remove(arr, index, key) {\n        arr.splice(index, 1);\n        return {\n            from: index,\n            key: key\n        };\n    }\n    function keyIndex(children) {\n        var keys = {};\n        var free = [];\n        var length = children.length;\n        for (var i = 0; i < length; i++) {\n            var child = children[i];\n            if (child.key) {\n                keys[child.key] = i;\n            } else {\n                free.push(i);\n            }\n        }\n        return {\n            keys: keys,\n            free: free\n        };\n    }\n    function appendPatch(apply, patch) {\n        if (apply) {\n            if (isArray(apply)) {\n                apply.push(patch);\n            } else {\n                apply = [\n                    apply,\n                    patch\n                ];\n            }\n            return apply;\n        } else {\n            return patch;\n        }\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/diff',['./vtree/diff'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var diff = __module__0;\n    module.exports = diff;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vdom/apply-properties',[\n    'skylark-langx/types',\n    '../vnode/is-vhook'\n], function (__module__0, __module__1) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var isObject = __module__0.isObject;\n    var isHook = __module__1;\n    module.exports = applyProperties;\n    function applyProperties(node, props, previous) {\n        for (var propName in props) {\n            var propValue = props[propName];\n            if (propValue === undefined) {\n                removeProperty(node, propName, propValue, previous);\n            } else if (isHook(propValue)) {\n                removeProperty(node, propName, propValue, previous);\n                if (propValue.hook) {\n                    propValue.hook(node, propName, previous ? previous[propName] : undefined);\n                }\n            } else {\n                if (isObject(propValue)) {\n                    patchObject(node, props, previous, propName, propValue);\n                } else {\n                    node[propName] = propValue;\n                }\n            }\n        }\n    }\n    function removeProperty(node, propName, propValue, previous) {\n        if (previous) {\n            var previousValue = previous[propName];\n            if (!isHook(previousValue)) {\n                if (propName === 'attributes') {\n                    for (var attrName in previousValue) {\n                        node.removeAttribute(attrName);\n                    }\n                } else if (propName === 'style') {\n                    for (var i in previousValue) {\n                        node.style[i] = '';\n                    }\n                } else if (typeof previousValue === 'string') {\n                    node[propName] = '';\n                } else {\n                    node[propName] = null;\n                }\n            } else if (previousValue.unhook) {\n                previousValue.unhook(node, propName, propValue);\n            }\n        }\n    }\n    function patchObject(node, props, previous, propName, propValue) {\n        var previousValue = previous ? previous[propName] : undefined;\n        if (propName === 'attributes') {\n            for (var attrName in propValue) {\n                var attrValue = propValue[attrName];\n                if (attrValue === undefined) {\n                    node.removeAttribute(attrName);\n                } else {\n                    node.setAttribute(attrName, attrValue);\n                }\n            }\n            return;\n        }\n        if (previousValue && isObject(previousValue) && getPrototype(previousValue) !== getPrototype(propValue)) {\n            node[propName] = propValue;\n            return;\n        }\n        if (!isObject(node[propName])) {\n            node[propName] = {};\n        }\n        var replacer = propName === 'style' ? '' : undefined;\n        for (var k in propValue) {\n            var value = propValue[k];\n            node[propName][k] = value === undefined ? replacer : value;\n        }\n    }\n    function getPrototype(value) {\n        if (Object.getPrototypeOf) {\n            return Object.getPrototypeOf(value);\n        } else if (value.__proto__) {\n            return value.__proto__;\n        } else if (value.constructor) {\n            return value.constructor.prototype;\n        }\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vdom/create-element',[\n    'skylark-langx/hoster',\n    './apply-properties',\n    '../vnode/is-vnode',\n    '../vnode/is-vtext',\n    '../vnode/is-widget',\n    '../vnode/handle-thunk'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4, __module__5) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var document = __module__0.document;\n    var applyProperties = __module__1;\n    var isVNode = __module__2;\n    var isVText = __module__3;\n    var isWidget = __module__4;\n    var handleThunk = __module__5;\n    module.exports = createElement;\n    function createElement(vnode, opts) {\n        var doc = opts ? opts.document || document : document;\n        var warn = opts ? opts.warn : null;\n        vnode = handleThunk(vnode).a;\n        if (isWidget(vnode)) {\n            return vnode.init();\n        } else if (isVText(vnode)) {\n            return doc.createTextNode(vnode.text);\n        } else if (!isVNode(vnode)) {\n            if (warn) {\n                warn('Item is not a valid virtual dom node', vnode);\n            }\n            return null;\n        }\n        var node = vnode.namespace === null ? doc.createElement(vnode.tagName) : doc.createElementNS(vnode.namespace, vnode.tagName);\n        var props = vnode.properties;\n        applyProperties(node, props);\n        var children = vnode.children;\n        for (var i = 0; i < children.length; i++) {\n            var childNode = createElement(children[i], opts);\n            if (childNode) {\n                node.appendChild(childNode);\n            }\n        }\n        return node;\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vdom/dom-index',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var noChild = {};\n    module.exports = domIndex;\n    function domIndex(rootNode, tree, indices, nodes) {\n        if (!indices || indices.length === 0) {\n            return {};\n        } else {\n            indices.sort(ascending);\n            return recurse(rootNode, tree, indices, nodes, 0);\n        }\n    }\n    function recurse(rootNode, tree, indices, nodes, rootIndex) {\n        nodes = nodes || {};\n        if (rootNode) {\n            if (indexInRange(indices, rootIndex, rootIndex)) {\n                nodes[rootIndex] = rootNode;\n            }\n            var vChildren = tree.children;\n            if (vChildren) {\n                var childNodes = rootNode.childNodes;\n                for (var i = 0; i < tree.children.length; i++) {\n                    rootIndex += 1;\n                    var vChild = vChildren[i] || noChild;\n                    var nextIndex = rootIndex + (vChild.count || 0);\n                    if (indexInRange(indices, rootIndex, nextIndex)) {\n                        recurse(childNodes[i], vChild, indices, nodes, rootIndex);\n                    }\n                    rootIndex = nextIndex;\n                }\n            }\n        }\n        return nodes;\n    }\n    function indexInRange(indices, left, right) {\n        if (indices.length === 0) {\n            return false;\n        }\n        var minIndex = 0;\n        var maxIndex = indices.length - 1;\n        var currentIndex;\n        var currentItem;\n        while (minIndex <= maxIndex) {\n            currentIndex = (maxIndex + minIndex) / 2 >> 0;\n            currentItem = indices[currentIndex];\n            if (minIndex === maxIndex) {\n                return currentItem >= left && currentItem <= right;\n            } else if (currentItem < left) {\n                minIndex = currentIndex + 1;\n            } else if (currentItem > right) {\n                maxIndex = currentIndex - 1;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n    function ascending(a, b) {\n        return a > b ? 1 : -1;\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vdom/update-widget',['../vnode/is-widget'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var isWidget = __module__0;\n    module.exports = updateWidget;\n    function updateWidget(a, b) {\n        if (isWidget(a) && isWidget(b)) {\n            if ('name' in a && 'name' in b) {\n                return a.id === b.id;\n            } else {\n                return a.init === b.init;\n            }\n        }\n        return false;\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vdom/patch-op',[\n    './apply-properties',\n    '../vnode/is-widget',\n    '../vnode/vpatch',\n    './update-widget'\n], function (__module__0, __module__1, __module__2, __module__3) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var applyProperties = __module__0;\n    var isWidget = __module__1;\n    var VPatch = __module__2;\n    var updateWidget = __module__3;\n    module.exports = applyPatch;\n    function applyPatch(vpatch, domNode, renderOptions) {\n        var type = vpatch.type;\n        var vNode = vpatch.vNode;\n        var patch = vpatch.patch;\n        switch (type) {\n        case VPatch.REMOVE:\n            return removeNode(domNode, vNode);\n        case VPatch.INSERT:\n            return insertNode(domNode, patch, renderOptions);\n        case VPatch.VTEXT:\n            return stringPatch(domNode, vNode, patch, renderOptions);\n        case VPatch.WIDGET:\n            return widgetPatch(domNode, vNode, patch, renderOptions);\n        case VPatch.VNODE:\n            return vNodePatch(domNode, vNode, patch, renderOptions);\n        case VPatch.ORDER:\n            reorderChildren(domNode, patch);\n            return domNode;\n        case VPatch.PROPS:\n            applyProperties(domNode, patch, vNode.properties);\n            return domNode;\n        case VPatch.THUNK:\n            return replaceRoot(domNode, renderOptions.patch(domNode, patch, renderOptions));\n        default:\n            return domNode;\n        }\n    }\n    function removeNode(domNode, vNode) {\n        var parentNode = domNode.parentNode;\n        if (parentNode) {\n            parentNode.removeChild(domNode);\n        }\n        destroyWidget(domNode, vNode);\n        return null;\n    }\n    function insertNode(parentNode, vNode, renderOptions) {\n        var newNode = renderOptions.render(vNode, renderOptions);\n        if (parentNode) {\n            parentNode.appendChild(newNode);\n        }\n        return parentNode;\n    }\n    function stringPatch(domNode, leftVNode, vText, renderOptions) {\n        var newNode;\n        if (domNode.nodeType === 3) {\n            domNode.replaceData(0, domNode.length, vText.text);\n            newNode = domNode;\n        } else {\n            var parentNode = domNode.parentNode;\n            newNode = renderOptions.render(vText, renderOptions);\n            if (parentNode && newNode !== domNode) {\n                parentNode.replaceChild(newNode, domNode);\n            }\n        }\n        return newNode;\n    }\n    function widgetPatch(domNode, leftVNode, widget, renderOptions) {\n        var updating = updateWidget(leftVNode, widget);\n        var newNode;\n        if (updating) {\n            newNode = widget.update(leftVNode, domNode) || domNode;\n        } else {\n            newNode = renderOptions.render(widget, renderOptions);\n        }\n        var parentNode = domNode.parentNode;\n        if (parentNode && newNode !== domNode) {\n            parentNode.replaceChild(newNode, domNode);\n        }\n        if (!updating) {\n            destroyWidget(domNode, leftVNode);\n        }\n        return newNode;\n    }\n    function vNodePatch(domNode, leftVNode, vNode, renderOptions) {\n        var parentNode = domNode.parentNode;\n        var newNode = renderOptions.render(vNode, renderOptions);\n        if (parentNode && newNode !== domNode) {\n            parentNode.replaceChild(newNode, domNode);\n        }\n        return newNode;\n    }\n    function destroyWidget(domNode, w) {\n        if (typeof w.destroy === 'function' && isWidget(w)) {\n            w.destroy(domNode);\n        }\n    }\n    function reorderChildren(domNode, moves) {\n        var childNodes = domNode.childNodes;\n        var keyMap = {};\n        var node;\n        var remove;\n        var insert;\n        for (var i = 0; i < moves.removes.length; i++) {\n            remove = moves.removes[i];\n            node = childNodes[remove.from];\n            if (remove.key) {\n                keyMap[remove.key] = node;\n            }\n            domNode.removeChild(node);\n        }\n        var length = childNodes.length;\n        for (var j = 0; j < moves.inserts.length; j++) {\n            insert = moves.inserts[j];\n            node = keyMap[insert.key];\n            domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to]);\n        }\n    }\n    function replaceRoot(oldRoot, newRoot) {\n        if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {\n            oldRoot.parentNode.replaceChild(newRoot, oldRoot);\n        }\n        return newRoot;\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vdom/patch',[\n    'skylark-langx/hoster',\n    'skylark-langx/arrays',\n    './create-element',\n    './dom-index',\n    './patch-op'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var document = __module__0.document;\n    var isArray = __module__1.isArray;\n    var render = __module__2;\n    var domIndex = __module__3;\n    var patchOp = __module__4;\n    module.exports = patch;\n    function patch(rootNode, patches, renderOptions) {\n        renderOptions = renderOptions || {};\n        renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch ? renderOptions.patch : patchRecursive;\n        renderOptions.render = renderOptions.render || render;\n        return renderOptions.patch(rootNode, patches, renderOptions);\n    }\n    function patchRecursive(rootNode, patches, renderOptions) {\n        var indices = patchIndices(patches);\n        if (indices.length === 0) {\n            return rootNode;\n        }\n        var index = domIndex(rootNode, patches.a, indices);\n        var ownerDocument = rootNode.ownerDocument;\n        if (!renderOptions.document && ownerDocument !== document) {\n            renderOptions.document = ownerDocument;\n        }\n        for (var i = 0; i < indices.length; i++) {\n            var nodeIndex = indices[i];\n            rootNode = applyPatch(rootNode, index[nodeIndex], patches[nodeIndex], renderOptions);\n        }\n        return rootNode;\n    }\n    function applyPatch(rootNode, domNode, patchList, renderOptions) {\n        if (!domNode) {\n            return rootNode;\n        }\n        var newNode;\n        if (isArray(patchList)) {\n            for (var i = 0; i < patchList.length; i++) {\n                newNode = patchOp(patchList[i], domNode, renderOptions);\n                if (domNode === rootNode) {\n                    rootNode = newNode;\n                }\n            }\n        } else {\n            newNode = patchOp(patchList, domNode, renderOptions);\n            if (domNode === rootNode) {\n                rootNode = newNode;\n            }\n        }\n        return rootNode;\n    }\n    function patchIndices(patches) {\n        var indices = [];\n        for (var key in patches) {\n            if (key !== 'a') {\n                indices.push(Number(key));\n            }\n        }\n        return indices;\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/patch',['./vdom/patch'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var patch = __module__0;\n    module.exports = patch;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/vnode',[\n    './version',\n    './is-vnode',\n    './is-widget',\n    './is-thunk',\n    './is-vhook'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var version = __module__0;\n    var isVNode = __module__1;\n    var isWidget = __module__2;\n    var isThunk = __module__3;\n    var isVHook = __module__4;\n    module.exports = VirtualNode;\n    var noProperties = {};\n    var noChildren = [];\n    function VirtualNode(tagName, properties, children, key, namespace) {\n        this.tagName = tagName;\n        this.properties = properties || noProperties;\n        this.children = children || noChildren;\n        this.key = key != null ? String(key) : undefined;\n        this.namespace = typeof namespace === 'string' ? namespace : null;\n        var count = children && children.length || 0;\n        var descendants = 0;\n        var hasWidgets = false;\n        var hasThunks = false;\n        var descendantHooks = false;\n        var hooks;\n        for (var propName in properties) {\n            if (properties.hasOwnProperty(propName)) {\n                var property = properties[propName];\n                if (isVHook(property) && property.unhook) {\n                    if (!hooks) {\n                        hooks = {};\n                    }\n                    hooks[propName] = property;\n                }\n            }\n        }\n        for (var i = 0; i < count; i++) {\n            var child = children[i];\n            if (isVNode(child)) {\n                descendants += child.count || 0;\n                if (!hasWidgets && child.hasWidgets) {\n                    hasWidgets = true;\n                }\n                if (!hasThunks && child.hasThunks) {\n                    hasThunks = true;\n                }\n                if (!descendantHooks && (child.hooks || child.descendantHooks)) {\n                    descendantHooks = true;\n                }\n            } else if (!hasWidgets && isWidget(child)) {\n                if (typeof child.destroy === 'function') {\n                    hasWidgets = true;\n                }\n            } else if (!hasThunks && isThunk(child)) {\n                hasThunks = true;\n            }\n        }\n        this.count = count + descendants;\n        this.hasWidgets = hasWidgets;\n        this.hasThunks = hasThunks;\n        this.hooks = hooks;\n        this.descendantHooks = descendantHooks;\n    }\n    VirtualNode.prototype.version = version;\n    VirtualNode.prototype.type = 'VirtualNode';\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/vnode/vtext',['./version'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var version = __module__0;\n    module.exports = VirtualText;\n    function VirtualText(text) {\n        this.text = String(text);\n    }\n    VirtualText.prototype.version = version;\n    VirtualText.prototype.type = 'VirtualText';\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/virtual-hyperscript/parse-tag',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var split = function (s, arg) {\n        return s.split(arg);\n    };\n    var classIdSplit = /([\\.#]?[a-zA-Z0-9\\u007F-\\uFFFF_:-]+)/;\n    var notClassId = /^\\.|#/;\n    module.exports = parseTag;\n    function parseTag(tag, props) {\n        if (!tag) {\n            return 'DIV';\n        }\n        var noId = !props.hasOwnProperty('id');\n        var tagParts = split(tag, classIdSplit);\n        var tagName = null;\n        if (notClassId.test(tagParts[1])) {\n            tagName = 'DIV';\n        }\n        var classes, part, type, i;\n        for (i = 0; i < tagParts.length; i++) {\n            part = tagParts[i];\n            if (!part) {\n                continue;\n            }\n            type = part.charAt(0);\n            if (!tagName) {\n                tagName = part;\n            } else if (type === '.') {\n                classes = classes || [];\n                classes.push(part.substring(1, part.length));\n            } else if (type === '#' && noId) {\n                props.id = part.substring(1, part.length);\n            }\n        }\n        if (classes) {\n            if (props.className) {\n                classes.push(props.className);\n            }\n            props.className = classes.join(' ');\n        }\n        return props.namespace ? tagName : tagName.toUpperCase();\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/virtual-hyperscript/hooks/soft-set-hook',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    module.exports = SoftSetHook;\n    function SoftSetHook(value) {\n        if (!(this instanceof SoftSetHook)) {\n            return new SoftSetHook(value);\n        }\n        this.value = value;\n    }\n    SoftSetHook.prototype.hook = function (node, propertyName) {\n        if (node[propertyName] !== this.value) {\n            node[propertyName] = this.value;\n        }\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/virtual-hyperscript/hooks/ev-hook',[], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var hashKey = '__EV_STORE_KEY@001';\n    function EvStore(elem) {\n        var hash = elem[hashKey];\n        if (!hash) {\n            hash = elem[hashKey] = {};\n        }\n        return hash;\n    }\n    module.exports = EvHook;\n    function EvHook(value) {\n        if (!(this instanceof EvHook)) {\n            return new EvHook(value);\n        }\n        this.value = value;\n    }\n    EvHook.prototype.hook = function (node, propertyName) {\n        var es = EvStore(node);\n        var propName = propertyName.substr(3);\n        es[propName] = this.value;\n    };\n    EvHook.prototype.unhook = function (node, propertyName) {\n        var es = EvStore(node);\n        var propName = propertyName.substr(3);\n        es[propName] = undefined;\n    };\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/virtual-hyperscript/index',[\n    'skylark-langx/arrays',\n    '../vnode/vnode',\n    '../vnode/vtext',\n    '../vnode/is-vnode',\n    '../vnode/is-vtext',\n    '../vnode/is-widget',\n    '../vnode/is-vhook',\n    '../vnode/is-thunk',\n    './parse-tag',\n    './hooks/soft-set-hook',\n    './hooks/ev-hook'\n], function (__module__0, __module__1, __module__2, __module__3, __module__4, __module__5, __module__6, __module__7, __module__8, __module__9, __module__10) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var isArray = __module__0.isArray;\n    var VNode = __module__1;\n    var VText = __module__2;\n    var isVNode = __module__3;\n    var isVText = __module__4;\n    var isWidget = __module__5;\n    var isHook = __module__6;\n    var isVThunk = __module__7;\n    var parseTag = __module__8;\n    var softSetHook = __module__9;\n    var evHook = __module__10;\n    module.exports = h;\n    function h(tagName, properties, children) {\n        var childNodes = [];\n        var tag, props, key, namespace;\n        if (!children && isChildren(properties)) {\n            children = properties;\n            props = {};\n        }\n        props = props || properties || {};\n        tag = parseTag(tagName, props);\n        if (props.hasOwnProperty('key')) {\n            key = props.key;\n            props.key = undefined;\n        }\n        if (props.hasOwnProperty('namespace')) {\n            namespace = props.namespace;\n            props.namespace = undefined;\n        }\n        if (tag === 'INPUT' && !namespace && props.hasOwnProperty('value') && props.value !== undefined && !isHook(props.value)) {\n            if (props.value !== null && typeof props.value !== 'string') {\n                throw UnsupportedValueType({\n                    expected: 'String',\n                    received: typeof props.value,\n                    Vnode: {\n                        tagName: tag,\n                        properties: props\n                    }\n                });\n            }\n            props.value = softSetHook(props.value);\n        }\n        transformProperties(props);\n        if (children !== undefined && children !== null) {\n            addChild(children, childNodes, tag, props);\n        }\n        return new VNode(tag, props, childNodes, key, namespace);\n    }\n    function addChild(c, childNodes, tag, props) {\n        if (typeof c === 'string') {\n            childNodes.push(new VText(c));\n        } else if (typeof c === 'number') {\n            childNodes.push(new VText(String(c)));\n        } else if (isChild(c)) {\n            childNodes.push(c);\n        } else if (isArray(c)) {\n            for (var i = 0; i < c.length; i++) {\n                addChild(c[i], childNodes, tag, props);\n            }\n        } else if (c === null || c === undefined) {\n            return;\n        } else {\n            throw UnexpectedVirtualElement({\n                foreignObject: c,\n                parentVnode: {\n                    tagName: tag,\n                    properties: props\n                }\n            });\n        }\n    }\n    function transformProperties(props) {\n        for (var propName in props) {\n            if (props.hasOwnProperty(propName)) {\n                var value = props[propName];\n                if (isHook(value)) {\n                    continue;\n                }\n                if (propName.substr(0, 3) === 'ev-') {\n                    props[propName] = evHook(value);\n                }\n            }\n        }\n    }\n    function isChild(x) {\n        return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);\n    }\n    function isChildren(x) {\n        return typeof x === 'string' || isArray(x) || isChild(x);\n    }\n    function UnexpectedVirtualElement(data) {\n        var err = new Error();\n        err.type = 'virtual-hyperscript.unexpected.virtual-element';\n        err.message = 'Unexpected virtual child passed to h().\\n' + 'Expected a VNode / Vthunk / VWidget / string but:\\n' + 'got:\\n' + errorString(data.foreignObject) + '.\\n' + 'The parent vnode is:\\n' + errorString(data.parentVnode);\n        '\\n' + 'Suggested fix: change your `h(..., [ ... ])` callsite.';\n        err.foreignObject = data.foreignObject;\n        err.parentVnode = data.parentVnode;\n        return err;\n    }\n    function UnsupportedValueType(data) {\n        var err = new Error();\n        err.type = 'virtual-hyperscript.unsupported.value-type';\n        err.message = 'Unexpected value type for input passed to h().\\n' + 'Expected a ' + errorString(data.expected) + ' but got:\\n' + errorString(data.received) + '.\\n' + 'The vnode is:\\n' + errorString(data.Vnode);\n        '\\n' + 'Suggested fix: Cast the value passed to h() to a string using String(value).';\n        err.Vnode = data.Vnode;\n        return err;\n    }\n    function errorString(obj) {\n        try {\n            return JSON.stringify(obj, null, '    ');\n        } catch (e) {\n            return String(obj);\n        }\n    }\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/h',['./virtual-hyperscript/index'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var h = __module__0;\n    module.exports = h;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/create-element',['./vdom/create-element'], function (__module__0) {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    var createElement = __module__0;\n    module.exports = createElement;\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});\ndefine('skylark-virtualdom/virtualdom',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"./diff\",\r\n\t\"./patch\",\r\n\t\"./h\",\r\n\t\"./create-element\",\r\n\t\"./vnode/vnode\",\r\n\t\"./vnode/vtext\"\r\n],function(skylark, diff, patch, h, create, VNode, VText){\r\n\treturn skylark.virtualdom = {\r\n\t    diff: diff,\r\n\t    patch: patch,\r\n\t    h: h,\r\n\t    create: create,\r\n\t    VNode: VNode,\r\n\t    VText: VText\t\t\r\n\t};\r\n});\ndefine('skylark-virtualdom/main',[\r\n\t\"./virtualdom\"\r\n],function(virtualdom){\r\n\r\n\treturn virtualdom;\r\n});\ndefine('skylark-virtualdom', ['skylark-virtualdom/main'], function (main) { return main; });\n\n"]}